---
title: Homework 7 - Creating a resume database
author: Benjamin Baldwin
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

Description: 
This document contains a write up on Homework 7 for CMSC 508. 
See Overiew and Description section for more details


GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-BaldwinBR>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This project created a database from scratch for an imaginary company.

It's purpose is to create a company-wide resume, capturing the collective skills and certifications of the employees

The Database consisted of tables: People, Roles, Skills, PeopleSkills, PeopleRoles

## Crows-foot diagram

People and Skills contain a many-to-many relationship that is resolved by the table peopleskills

People and Roles contain a many-to-many relationship that is resolved by the table peopleroles

```{mermaid}
%%| echo: false
erDiagram

    skills ||--o{ peopleskills: have
    peopleskills }o--|| people : have

    roles ||--o{ peopleroles: have
    peopleroles }o--|| people: have
    
    
    skills{
        int id PK
        string name
        string description
        string tag
        string url
        int time_commitment
    }

    people{
        int id PK
        string first_name
        string last_name
        string email
        string linkedin_url
        string headshot_url
        string discord_handle
        string brief_bio
        date date_joined
    }

    peopleskills{
        int id PK
        int skills_id FK
        int people_id FK
        date date_acquired
    }

    roles{
        int id PK
        string name
        int sort_priority
    }

    peopleroles{
        int id PK
        int people_id FK
        int role_id FK
        date date_assigned
    }
```

## Examples of data in the database

### People table

The *people* table contains elements that describe the employees of our fictional company

The people have information contained in the table about their id, first name, last name, email, LinkedIn url, headshot url, discord handle, a brief bio, and the date they joined the organization.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe the skills the employees may hold 

The skills table includes the information id, description, tag, a helpful url, and the time commitment of learning.

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe the roles an employee can have

The roles table includes the information id, name of role, and the sorting priority of that role

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries


# List skill names, tags, and descriptions ordered by name

```{python}
sql = f"""
SELECT
    name,
    tag,
    description
FROM
    skills
ORDER BY
    name;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name


### List skill names of Person 1

```{python}
sql = f"""
SELECT
    last_name,
    name
FROM
    peopleskills a 
    INNER JOIN people b on (a.people_id=b.id)
    INNER JOIN skills c on (a.skills_id=c.id)
WHERE
    last_name = 'Person 1'
ORDER BY
    name,
    last_name;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names with Skill 6
```{python}
sql = f"""
SELECT
    first_name,
    last_name,
    tag
FROM
    peopleskills a 
    INNER JOIN people b on (a.people_id=b.id)
    INNER JOIN skills c on (a.skills_id=c.id)
WHERE
    tag = 'Skill 6'
ORDER BY
    name,
    last_name;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people with a DEVELOPER role

```{python}
sql = f"""
SELECT
    first_name,
    last_name,
    name
FROM
    peopleroles a 
    INNER JOIN people b on (a.people_id=b.id)
    INNER JOIN roles c on (a.role_id=c.id)
WHERE
    name = 'Developer'
ORDER BY
    name,
    last_name;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and email addresses of people without skills

```{python}
sql = f"""
SELECT
    skills_id,
    first_name,
    last_name,
    email
FROM
    people a
    LEFT JOIN peopleskills b ON a.id = b.people_id
WHERE 
    skills_id IS NULL
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and tags of unused skills

```{python}
sql = f"""
SELECT
    name,
    tag
FROM
    skills a
    LEFT JOIN peopleskills b ON a.id = b.skills_id
WHERE 
    people_id IS NULL
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names and skill names with the BOSS role

```{python}
sql = f"""
SELECT DISTINCT
   first_name,
   last_name,
   e.name
FROM
    peopleroles a 
    INNER JOIN people c on (a.people_id = c.id)
    INNER JOIN roles e on (a.role_id = e.id)
    INNER JOIN peopleskills b on (a.people_id=b.people_id)
    INNER JOIN skills d on (b.skills_id = d.id)
    
WHERE
    e.id = 5
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List ids and names of unused roles

```{python}
sql = f"""
SELECT
    a.id,
    name
FROM
    roles a
    LEFT JOIN peopleroles b ON a.id = b.role_id
WHERE 
    people_id IS NULL
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

## Reflection

My experience with this assignment was generally good. It was almost fun to build a database from the ground up and really connect all those wires
together in real time. I would probably consider this my favorite homework of the semester so far. The main issues I had coming out of this project is, and continue to be, time. Everything just takes more time than I think it will. Whether it be plugging records into a table or crafting a SQL statement to perfectly encapsulate the desired outcome. I know that with more practice though I will become quicker with all these things and that will factor less into projects going forward. 

